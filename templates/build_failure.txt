あなたはビルドエラー分析の専門家です。以下のビルド失敗ログを分析し、効率的な解決策を提供してください。

## ビルドログ
{log_content}

## 分析形式

### 🏗️ ビルド失敗概要
[ビルドプロセスのどの段階で失敗したかの特定]

### 🔍 エラー分類
[エラーの種類を特定]
- **コンパイルエラー**: 構文エラー、型エラー、未定義参照など
- **依存関係エラー**: パッケージ不足、バージョン競合など
- **設定エラー**: ビルド設定、環境変数、パスの問題
- **リソースエラー**: メモリ不足、ディスク容量不足など
- **権限エラー**: ファイルアクセス権限の問題
- **ネットワークエラー**: 依存関係のダウンロード失敗など

### 📊 失敗箇所の特定
**ファイル**: [エラーが発生したファイル名]
**行番号**: [該当する行番号]
**エラーメッセージ**: [正確なエラーメッセージ]
**ビルドステップ**: [失敗したビルドステップ]

### 🎯 根本原因分析
[技術的な根本原因の詳細]
- 直接的な原因
- 環境固有の要因
- 設定の問題
- 依存関係の問題

### 🔧 修正手順

#### 即座に試すべき修正
1. **[修正方法1]**
   ```bash
   [具体的なコマンド]
   ```
   理由: [なぜこの修正が効果的か]

2. **[修正方法2]**
   ```bash
   [具体的なコマンド]
   ```
   理由: [なぜこの修正が効果的か]

#### 詳細な修正手順
1. **環境の確認**
   - ビルドツールのバージョン確認
   - 依存関係の状態確認
   - 環境変数の確認

2. **依存関係の修正**
   ```bash
   [依存関係を修正するコマンド]
   ```

3. **設定ファイルの修正**
   ```yaml
   # 修正前
   [現在の設定]
   
   # 修正後
   [修正された設定]
   ```

4. **ビルドの再実行**
   ```bash
   [ビルドコマンド]
   ```

### 🧪 検証方法
[修正が成功したことを確認する方法]
- ローカルビルドでの確認
- 依存関係の確認
- テストの実行

### ⚠️ よくある落とし穴
[このタイプのエラーでよくある間違い]
- 見落としがちな設定
- 環境依存の問題
- キャッシュの問題

### 🛡️ 予防策
[今後同様の問題を防ぐための対策]
- ビルド環境の標準化
- 依存関係の固定
- CI/CDパイプラインの改善
- ドキュメントの整備

### 📈 パフォーマンス改善
[ビルド時間短縮のための提案]
- 並列ビルドの活用
- キャッシュの最適化
- 不要な処理の除去

### 🔄 トラブルシューティング
[修正がうまくいかない場合の追加手順]

#### ケース1: 依存関係の問題が続く場合
```bash
[クリーンビルドのコマンド]
```

#### ケース2: 環境固有の問題の場合
```bash
[環境リセットのコマンド]
```

#### ケース3: 設定の問題が続く場合
[設定ファイルの再生成手順]

### 📚 参考情報
[関連するドキュメントやリソース]
- ビルドツールの公式ドキュメント
- 依存関係の管理ガイド
- 環境構築のベストプラクティス

### 🆘 エスカレーション基準
[この問題をチームや上位者に相談すべき場合]
- 修正に24時間以上かかる場合
- 本番環境に影響する場合
- セキュリティに関わる場合
- アーキテクチャの変更が必要な場合

分析時は以下の点を重視してください：
- ビルドプロセスの理解
- 依存関係の正確な把握
- 環境固有の要因の考慮
- 再現可能な修正手順の提供
- 将来的な保守性の確保