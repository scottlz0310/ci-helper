[project]
name = "ci-helper"
version = "1.0.0"
description = "actを使用したローカルCI/CDパイプライン検証とAI統合機能を提供するCLIツール"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "scottlz0310", email = "scottlz0310@users.noreply.github.com" },
]
maintainers = [
    { name = "scottlz0310", email = "scottlz0310@users.noreply.github.com" },
]
requires-python = ">=3.12"
dependencies = [
    "click>=8.1.0",
    "rich>=13.9.0",
    "tiktoken>=0.8.0",
    "tomli>=2.0.0; python_version < '3.11'",
    # AI統合用の依存関係
    "openai>=1.50.0",
    "anthropic>=0.34.0",
    "aiohttp>=3.10.0",
    "aiofiles>=24.1.0",
]
keywords = [
    "ci",
    "cd",
    "github-actions",
    "act",
    "cli",
    "testing",
    "local-ci",
    "workflow",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Build Tools",
    "Topic :: System :: Systems Administration",
    "Typing :: Typed",
]

[project.scripts]
ci-run = "ci_helper.cli:main"

[project.urls]
Homepage = "https://github.com/scottlz0310/ci-helper"
Repository = "https://github.com/scottlz0310/ci-helper.git"
Issues = "https://github.com/scottlz0310/ci-helper/issues"
Documentation = "https://github.com/scottlz0310/ci-helper/blob/main/README.md"
Changelog = "https://github.com/scottlz0310/ci-helper/blob/main/CHANGELOG.md"

[dependency-groups]
dev = [
    "pytest>=8.4.0",
    "pytest-cov>=7.0.0",
    "pytest-xdist>=3.8.0",
    "pytest-mock>=3.15.0",
    "ruff>=0.14.0",
    "mypy>=1.18.0",
    "pre-commit>=4.3.0",
    "bandit[toml]>=1.8.0",
    "pytest-asyncio>=1.2.0",
    "psutil>=7.1.1",
    "pytest-timeout>=2.4.0",
    "types-aiofiles>=25.1.0.20251011",
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.6.0",
    "pytest-mock>=3.14.0",
]
lint = ["ruff>=0.14.0", "mypy>=1.18.0", "bandit[toml]>=1.8.0"]

[[tool.uv.index]]
url = "https://pkgs.safetycli.com/repository/public/pypi/simple/"
default = true

[build-system]
requires = ["uv_build>=0.9.2,<0.10.0"]
build-backend = "uv_build"

[tool.ruff]
target-version = "py312"
line-length = 120

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "S",   # bandit
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "T20", # flake8-print
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "S101",   # use of assert (ok in tests)
    "S105",   # possible hardcoded password (false positives for comments)
    "S110",   # try-except-pass (intentional for non-critical errors)
    "S112",   # try-except-continue (intentional for non-critical errors)
    "S603",   # subprocess call (trusted input from config)
    "S607",   # starting process with partial executable path (ok for docker/act)
    "B904",   # raise without from (intentional for custom exceptions)
    "RUF001", # ambiguous unicode characters in strings (ok for Japanese)
    "RUF002", # ambiguous unicode characters in docstrings (ok for Japanese)
    "RUF003", # ambiguous unicode characters in comments (ok for Japanese)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S106", "S603"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.mypy]
python_version = "3.13"
strict = false
warn_return_any = false
warn_unused_configs = false
disallow_any_generics = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
explicit_package_bases = true
mypy_path = "src"
ignore_missing_imports = true
disable_error_code = "import-untyped,no-any-return,attr-defined,operator,arg-type,assignment,override,call-arg,return-value,var-annotated,index,dict-item,valid-type,no-untyped-def,unreachable,union-attr"

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "ci_helper.commands.*"
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "ci_helper.cli"
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = [
    "ci_helper.core.security",
    "ci_helper.core.log_analyzer",
    "tests.unit.test_error_handler",
]
warn_unreachable = false

[[tool.mypy.overrides]]
module = "click.*"
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "*/migrations/*", "*/__pycache__/*"]
parallel = true
data_file = ".coverage"
branch = false
concurrency = ["thread", "multiprocessing"]

[tool.coverage.report]
fail_under = 70
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
skip_empty = false

[tool.coverage.paths]
source = ["src/", "*/site-packages/"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=ci_helper",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-config=pyproject.toml",
    "--cov-append",
    "-n",
    "logical",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--maxfail=50",
]
minversion = "8.0"
asyncio_mode = "auto"
timeout = 300
timeout_method = "thread"
log_cli = false
log_cli_level = "WARNING"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
markers = [
    "slow: 実行時間が長いテスト",
    "integration: 統合テスト",
    "performance: パフォーマンステスト",
    "ci: CI/CD関連テスト",
    "unit: ユニットテスト",
    "ai: AI機能関連テスト",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:pytest_xdist",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore::ResourceWarning",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = [
    "B101", # assert_used
    "B601", # paramiko_calls
    "B603", # subprocess_without_shell_equals_true
    "B404", # blacklist import subprocess
    "B607", # start_process_with_partial_path
    "B105", # hardcoded_password_string
    "B110", # try_except_pass
    "B112", # try_except_continue
]
